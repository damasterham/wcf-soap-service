using SoapWebServiceClient.SoapWebServiceNameSpace;
using System;

namespace SoapWebServiceClient
{
    public class Program
    {
        private const string opMsg = "{0}({1},{2}) = {3}";
        private const string insufArgs = "There are insufficient arugments. {0} requires {1} values of type {2}";
        private const string invalidArgs = "The arguments are invalid. {0} requires {1} values of type {2}";
        private const string woops = "Arguments where valid, but something went wrong.";

        static void Main(string[] args)
        {
            // Generated by wvf???
            // An instance of the WCF proxy
            CalculatorClient calculator = new CalculatorClient();

            while (true)
            {
                string[] input = Console.ReadLine().ToLower().Split(' ');
                double a, b;

                // Check if more than one

                // check first value for operation

                // check for subsequent values on operations




                switch (input[0])
                {
                    case "quit":
                    case "exit":
                        return;
                    case "add":
                        Result<bool> valid = validateEquasion(input, out a, out b);
                        if (valid.Value)
                            Console.WriteLine(calculator.Add(a,b));
                        else
                            switch (valid.Error)
                            {
                                case InputError.None:
                                    Console.WriteLine(woops);
                                    break;
                                case InputError.InsufficientArugments:
                                    Console.WriteLine(string.Format(insufArgs, "Add", "2", "double"));
                                    break;
                                case InputError.InvalidArguments:
                                    Console.WriteLine(string.Format(invalidArgs, "Add", "2", "double"));
                                    break;
                            }
                        //Console.WriteLine(" = ", calculator.Add(, input[2]));
                        break;


                    default:
                        break;
                }


                calculator.Close();
            }
        }

        private static Result<bool> validateEquasion(string[] input, out double a, out double b)
        {
            //InputError valid;
            bool valid = true;
      

            valid &= input.Length > 2;
            if (!valid)
            {
                a = 0;
                b = 0;
                return new Result<bool>(valid, InputError.InsufficientArugments);
            }
            else
            {
                valid &= double.TryParse(input[1], out a);
                valid &= double.TryParse(input[2], out b);
                if (!valid)
                    return new Result<bool>(valid, InputError.InvalidArguments);
            }
            return new Result<bool>(valid, InputError.None);
        }

        private static void example(CalculatorClient client)
        {
            double a = 100;
            double b = 15.99d;
            double result = client.Add(a, b);
            Console.WriteLine(string.Format(opMsg, "Add", a, b, result));

            a = 123;
            b = 45.45d;
            result = client.Subtract(a, b);
            Console.WriteLine(string.Format(opMsg, "Subtract", a, b, result));

            a = 43;
            b = 12.4345d;
            result = client.Multiply(a, b);
            Console.WriteLine(string.Format(opMsg, "Multiply", a, b, result));

            a = 22;
            b = 7;
            result = client.Divide(a, b);
            Console.WriteLine(string.Format(opMsg, "Divide", a, b, result));
        }

    }

    public class Result<T>
    {
        private T value;
        private InputError error;

        public Result(T value, InputError error)
        {
            this.value = value;
            this.error = error;
        }

        public T Value
        {
            get { return value; }
        }

        public InputError Error
        {
            get { return error; }
        }
    }

    public enum InputError
    {
        None,
        InsufficientArugments,
        InvalidArguments,
    }
}